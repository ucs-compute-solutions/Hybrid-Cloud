# This is the main play for the RedHat OCP solution with HyperFlex (FI-attached)

---
- name: Play for API Login to UCSM to collect device claim info (for use by Intersight)
  hosts: HX_FI
  connection: local
  vars:
    # Create an anchor for api_info that can be used throughout the file
    api_login_info: &api_login_info
      ucsm_hostname: "{{ inventory_hostname }}"
      ucsm_username: "{{ username | default('admin') }}"
      ucsm_password: "{{ password }}"
      ucsm_state:    "{{ state | default(omit) }}"
      tasks:
      # add a check to se if DNS is configured and Intersight can be resolved
        block:
          - debug:
              msg: "Login Username: {{api_login_info.username}} and Login Password: {{api_login_info.password}}"
          
          - name: XML API Login into UCSM
            # vars:
            ansible.builtin.uri:
              url: "https://{{ inventory_hostname }}/nuova"
              method: POST
              headers: 
                Content-Type: application/x-www-form-urlencoded
              body: <aaaLogin inName='{{api_login_info.username}}' inPassword='{{api_login_info.password}}'></aaaLogin>
              body_format: form-urlencoded
              status_code: 200
              return_content: yes
              timeout: 30
              validate_certs: no
            register: login_response
          - debug:
              msg: "Login ingo {{ *api_login_info.username }}"
              msg: "{{ login_response.content }}"
          
          - name: Get cookie from xml response
            # pip install lxml maybe required 
            xml:
              xmlstring: "{{ login_response.content }}"
              content: "attribute"
              xpath: /aaaLogin
            register: xmlattribute
          - debug:
              var: xmlattribute.matches[0].aaaLogin.outCookie

          - name: Set cookie var
            set_fact:
              ucsm_cookie: "{{ xmlattribute.matches[0].aaaLogin.outCookie | string }}"
          - name: Check data type for Cookie
            debug:
              msg: "{{ ucsm_cookie | type_debug }}"
        delegate_to: localhost

        - name: Enable Device Connector
          uri:
            url: "https://{{ inventory_hostname }}/connector/Systems"
            method: PUT
            headers:
              Content-Type: application/json
              ucsmcookie: "ucsm-cookie={{ ucsm_cookie }}"
            body: "{\"AdminState\": true}"
            status_code: 200
            return_content: yes
            validate_certs: no
        - name: Pause for Device Connector to enable
          pause:
            seconds: 30

        - name: Get Device Identifier
          uri:
            url: "https://{{ inventory_hostname }}/connector/DeviceIdentifiers"
            method: GET
            headers:
              Content-Type: application/json
              ucsmcookie: "ucsm-cookie={{ ucsm_cookie }}"
            status_code: 200
            return_content: yes
            validate_certs: no
          register: response
        - debug:
            msg: "Get Device ID response is: {{ response  }}"
        - name: Extract device id
          set_fact:
            device_id: "{{ response.json[0].Id }}"
          debug:
            msg: "Device ID is: {{ response.json[0].Id  }}"
        - name: Get Claim Code
          uri:
            url: "https://{{ inventory_hostname }}/connector/SecurityTokens"
            method: GET
            headers:
              Content-Type: application/json
              ucsmcookie: "ucsm-cookie={{ ucsm_cookie }}"
            status_code: 200
            return_content: yes
            validate_certs: no
          register: response
        - debug:
            msg: "Get Claim Code response is: {{ response  }}"
        - name: Extract claim code
          set_fact:
            claim_code: "{{ response.json[0].Token }}"
          debug:
            msg: "{{ response.json[0].Token  }}"