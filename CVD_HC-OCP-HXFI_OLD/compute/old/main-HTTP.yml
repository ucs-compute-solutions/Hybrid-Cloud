---
- name: Play for API Login to UCSM to collect device claim info (for use by Intersight)
  hosts: HX_FI
  connection: local
  vars:
    # Create an anchor for api_info that can be used throughout the file
    api_info: &api_info
      api_private_key: "{{ api_private_key }}"
      api_key_id: "{{ api_key_id }}"
      api_uri: "{{ api_uri | default(omit) }}"
      validate_certs: "{{ validate_certs | default(omit) }}"
      state: "{{ state | default(omit) }}"
    api_login_info: &api_login_info
      hostname: "{{ inventory_hostname }}"
      username: "{{ username | default('admin') }}"
      password: "{{ password }}"
      state:    "{{ state | default(omit) }}"
  tasks:
  # consider putting everything in a block
    - debug:
        msg: "Login Username: {{api_login_info.username}} and Login Password: {{api_login_info.password}}"
    - name: Login into UCSM
      # vars:
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/nuova"
        method: POST
        headers: 
          Content-Type: application/x-www-form-urlencoded
        body: <aaaLogin inName='{{api_login_info.username}}' inPassword='{{api_login_info.password}}'></aaaLogin>
        body_format: form-urlencoded
        #status_code: 200
        return_content: yes
        #timeout: 60
        validate_certs: no
      register: login_response
    - debug:
        msg: "Login ingo {{ *api_login_info.username }}"
        msg: "{{ login_response.content }}"
    - name: Get cookie from xml response
      # pip install lxml required 
      xml:
        xmlstring: "{{ login_response.content }}"
        content: "attribute"
        xpath: /aaaLogin
      register: xmlattribute

    - name: Show an attribute value
      debug:
        var: xmlattribute.matches[0].aaaLogin.outCookie

    - name: Set cookie var
      set_fact:
        cookie_fact: "{{ xmlattribute.matches[0].aaaLogin.outCookie | string }}"

    - name: check variable data type
      debug:
        msg: "{{ cookie_fact | type_debug }}"

    - name: Enable Device Connector
      uri:
        url: "https://{{ inventory_hostname }}/connector/Systems"
        method: PUT
        headers:
          Content-Type: application/json
          ucsmcookie: "ucsm-cookie={{ cookie_fact }}"
        body: "{\"AdminState\": true}"
        status_code: 200
        return_content: yes
        validate_certs: no

    - name: Pause for Device Connector to enable
      pause:
        seconds: 30

    - name: Get Device Identifier
      uri:
        url: "https://{{ inventory_hostname }}/connector/DeviceIdentifiers"
        method: GET
        headers:
          Content-Type: application/json
          ucsmcookie: "ucsm-cookie={{ cookie_fact }}"
        status_code: 200
        return_content: yes
        validate_certs: no
      register: response

    - name: Show an attribute value
      debug:
        msg: "{{ response.json[0].Id  }}"

    - name: Extract device id
      set_fact:
        #device_id_fact: "{{ response.json[0].Id }}"
        device_id: "{{ response.json[0].Id }}"
    - name: Get Device Security Token
      uri:
        url: "https://{{ inventory_hostname }}/connector/SecurityTokens"
        method: GET
        headers:
          Content-Type: application/json
          ucsmcookie: "ucsm-cookie={{ cookie_fact }}"
        status_code: 200
        return_content: yes
        validate_certs: no
      register: response

    - name: Show an attribute value
      debug:
        msg: "{{ response.json[0].Token  }}"

    - name: Extract claim code
      set_fact:
        #device_token_fact: "{{ response.json[0].Token }}"
        claim_code: "{{ response.json[0].Token }}"

    # - name: Create InterSight API Body Payload
    #   set_fact:
    #     api_body_payload: "{{ api_body_payload | default({})  | combine({item.key: item.value}) }}"
    #   with_items:
    #     - { key: "device_id", value: "{{ device_id_fact }}" }
    #     - { key: "claim_code", value: "{{ device_token_fact }}" }

    - name: Claim new Target
      cisco.intersight.intersight_target_claim:
        <<: *api_info
        device_id: "{{ device_id }}"
        claim_code: "{{ claim_code }}"
        state: present

    # - name: Delete a Target (unclaim)
    #   cisco.intersight.intersight_target_claim:
    #     <<: *api_info
    #     device_id: "{{ device_id }}"
    #     state: absent




   

# ---
# - name: Play for API Login to UCSM to collect device claim info (for use by Intersight)
#   hosts: HX_FI
#   connection: local
#   collections:
#   # Add a requirements file for collections
#   - cisco.ucs
#   gather_facts: true 
#   vars: 
#   # create api login anchor for use by multiple plays within this file
#   # ? Can we use a vars_file but the info is still dynamically collected? Worth it? 
#   # This will be commented out in inidividual plays but can be left here to test the tasks quickly
#     api_login_info: &api_login_info
#       hostname: "{{ inventory_hostname }}"
#       username: "{{ username | default('admin') }}"
#       password: "{{ password }}"
#       state:    "{{ state | default(omit) }}"
#   tasks: 
#     # API Login Task !! remove later!!
#     - name: Login to UCSM 
#       ucs_managed_objects:
#         <<: *api_login_info

#         objects:
#         - module: ucsmsdk.mometa.cloud.CloudDeviceConnectorEp
#           class: CloudDeviceConnectorEp
#           properties:
#             parent_mo_or_dn: sys/cloud-mgmt
#             #claim_state: claimed
#             #admin_state: enabled
#             #description: 'Hello!' 
#       register: device_connector_info
#     - debug:
#         #msg: "UCS state is {{ state }}"
#         msg: "Device Connector Info is {{ device_connector_info }}"
#         #var: device_connector_info
#         #verbosity: 4


#           # - {
#           #     "module": "ucsmsdk.mometa.compute.ComputePortDiscPolicy",
#           #     "module": sys/cloud-mgmt/device-connector
#           #     "class": "ComputePortDiscPolicy",
#           #     "properties": {
#           #         "parent_mo_or_dn": "org-root",
#           #         "eth_svr_auto_discovery": "enabled"
#           #     }
#           #   }




# - name: Play_Claim UCSM Managed hosts in Intersight
#   hosts: "{{ group | default('HX_FI') }}"
#   connection: local
#   gather_facts: false
#   tasks:
#     #- include_tasks: ../intersight-python-utils/config_targets/HC_claim.yml
#     - include_tasks: HC_ClaimDevice_Task.yml
#       vars:
#       # override on command line if needed
#         target_hostname: "{{ inventory_hostname }}"
#         target_username: "{{ username | default('admin') }}"
#         target_password: "{{ password }}"
#         platform_type: "{{ device_type | default('ucs') }}"
#         target_proxy_host: "{{ proxy_host | default('') }}"
#         target_proxy_port: "{{ proxy_port | default(0) }}"
#         target_read_only: "{{ read_only | default(false) }}"
#         target_resource_groups: "{{ resource_groups | default(omit) }}"

    #- tags: Ansible_Intersight


